// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //Регистр А. Записывает в регистр А значение instruction если крайний левый бит = 0 
    Not(in= instruction[15], out= isLoadAFromIn);
    Mux16(a= outALU, b= instruction, sel= isLoadAFromIn, out= out1);

    And(a= instruction[5], b= instruction[15], out= isloadAFromALU);

    Or(a= isLoadAFromIn, b= isloadAFromALU, out= isloadA);

    Mux16(a= out1, b= instruction, sel= isloadAFromALU, out= out111);

    ARegister(in= out111, load= isloadA, out= outA, out[0..14] = addressM);

    //
    Mux16(a= outA, b= inM, sel= instruction[12], out= out2);

    // Регистр D
    And(a= instruction[15], b= instruction[4], out= outDAnd);
    DRegister(in= outALU, load= outDAnd, out= outD);

    // ALU
    ALU(
    x= outD,
    y= out2, 
    zx= instruction[11],
    nx= instruction[10],
    zy= instruction[9],
    ny= instruction[8],
    f= instruction[7],
    no= instruction[6], 
    out= outALU, 
    out=outM,
    zr= outZr, 
    ng= outNg
    );

    //writeM
    And(a= instruction[3], b= instruction[15], out= writeM);

    //PC
    And(a= outZr, b= instruction[1], out= outZr1);
    And(a= outNg, b= instruction[2], out= outNg1);
    Not(in= outZr, out= notoutZr);
    Not(in= outNg, out= notoutNg);
    And(a= notoutZr, b= notoutNg, out= isPositive);
    And(a= isPositive, b= instruction[0], out= outPos);

    Or(a= outZr1, b= outNg1, out= kk);
    Or(a= kk, b= outPos, out= changeLine);

    PC(in= outA, load= changeLine, inc= true, reset= reset, out[0..14]=pc);


	//// Replace this comment with your code.
}