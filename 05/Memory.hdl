// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

     // isKeyBoard
    And(a= address[13], b= address[14], out= isKeyBoard);

    //isRam
    Not(in= address[14], out= out1);
    And(a= out1, b= true, out= isRam);

    // isScreen
    Not(in= isKeyBoard, out= out2);
    Not(in= isRam, out= out3);
    And(a= out2, b= out3, out= isScreen);


    Keyboard(out= outKey);

    And(a= isScreen, b= load, out= out4);
    Screen(in= in, load= out4, address= address[0..12], out= outScreen);

 And(a= isRam, b= load, out= out5);
 RAM16K(in= in, load= out5, address=address[0..13], out= outRam);

 Mux16(a= outKey, b= outScreen, sel= isScreen, out= outA);
 Mux16(a= outA, b= outRam, sel= isRam, out= out);
	//// Replace this comment with your code.
}